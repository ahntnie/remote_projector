import 'dart:async';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../../widget/base_page.dart';

class LuckyWheelPage extends StatefulWidget {
  @override
  _LuckyWheelPageState createState() => _LuckyWheelPageState();
}

class _LuckyWheelPageState extends State<LuckyWheelPage> {
  final TextEditingController _codeController = TextEditingController();
  final TextEditingController _numbersController = TextEditingController();
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  bool _isConnected = false;
  String? _connectedDocumentId;
  StreamSubscription<DocumentSnapshot>? _documentSubscription;

  @override
  void initState() {
    super.initState();
  }

  // Hi·ªÉn th·ªã dialog l·ªói chung
  void _showErrorDialog(String title, String message) {
    showDialog(
      context: context,
      barrierDismissible: true,
      builder: (context) => Dialog(
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
        elevation: 10,
        child: Container(
          width: MediaQuery.of(context).size.width * 0.8,
          padding: EdgeInsets.all(20),
          decoration: BoxDecoration(
            gradient: LinearGradient(
              colors: [Colors.red.shade300, Colors.orange.shade300],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
            borderRadius: BorderRadius.circular(20),
            boxShadow: [
              BoxShadow(
                color: Colors.black26,
                blurRadius: 10,
                offset: Offset(0, 5),
              ),
            ],
          ),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Icon(
                Icons.error_outline,
                size: 50,
                color: Colors.white,
              ),
              SizedBox(height: 15),
              Text(
                title,
                style: TextStyle(
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                  shadows: [
                    Shadow(
                      color: Colors.black45,
                      offset: Offset(2, 2),
                      blurRadius: 5,
                    ),
                  ],
                ),
                textAlign: TextAlign.center,
              ),
              SizedBox(height: 10),
              Text(
                message,
                style: TextStyle(
                  fontSize: 16,
                  color: Colors.white.withOpacity(0.9),
                  fontWeight: FontWeight.w500,
                ),
                textAlign: TextAlign.center,
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  Navigator.pop(context);
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.white,
                  padding: EdgeInsets.symmetric(horizontal: 30, vertical: 12),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(15),
                  ),
                  elevation: 5,
                ),
                child: Text(
                  'OK',
                  style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                    color: Colors.red.shade700,
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  // K·∫øt n·ªëi ƒë·∫øn m√£ minigame
  Future<void> _connectToMinigame() async {
    final code = _codeController.text.trim();
    if (code.isEmpty) {
      _showErrorDialog(
        'Thi·∫øu M√£ Minigame',
        'Vui l√≤ng nh·∫≠p m√£ minigame ƒë·ªÉ k·∫øt n·ªëi.',
      );
      return;
    }

    try {
      DocumentSnapshot doc =
          await _firestore.collection('lucky_wheel').doc(code).get();
      if (doc.exists) {
        await _firestore.collection('lucky_wheel').doc(code).update({
          'connect': true,
        });
        setState(() {
          _isConnected = true;
          _connectedDocumentId = code;
        });
        _listenToDocumentChanges(code);
        _showSuccessDialog();
        print('üìÑ K·∫øt n·ªëi th√†nh c√¥ng ƒë·∫øn document $code');
      } else {
        _showErrorDialog(
          'M√£ Kh√¥ng T·ªìn T·∫°i',
          'M√£ minigame b·∫°n nh·∫≠p kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ki·ªÉm tra l·∫°i.',
        );
      }
    } catch (e) {
      _showErrorDialog(
        'L·ªói K·∫øt N·ªëi',
        'ƒê√£ x·∫£y ra l·ªói khi k·∫øt n·ªëi: $e',
      );
      print('‚ùå L·ªói khi k·∫øt n·ªëi: $e');
    }
  }

  // L·∫Øng nghe s·ª± thay ƒë·ªïi c·ªßa document
  void _listenToDocumentChanges(String documentId) {
    _documentSubscription?.cancel();
    _documentSubscription = _firestore
        .collection('lucky_wheel')
        .doc(documentId)
        .snapshots()
        .listen((snapshot) {
      if (!snapshot.exists) {
        setState(() {
          _isConnected = false;
          _connectedDocumentId = null;
          _codeController.clear();
          _numbersController.clear();
        });
        _documentSubscription?.cancel();
        _showErrorDialog(
          'K·∫øt N·ªëi B·ªã Ng·∫Øt',
          'M√£ minigame ƒë√£ b·ªã x√≥a, k·∫øt n·ªëi b·ªã ng·∫Øt.',
        );
        print('‚ùå Document $documentId ƒë√£ b·ªã x√≥a');
      }
    }, onError: (e) {
      setState(() {
        _isConnected = false;
        _connectedDocumentId = null;
        _codeController.clear();
        _numbersController.clear();
      });
      _documentSubscription?.cancel();
      _showErrorDialog(
        'L·ªói Theo D√µi',
        'L·ªói khi theo d√µi document: $e',
      );
      print('‚ùå L·ªói khi theo d√µi document: $e');
    });
  }

  // Ng·∫Øt k·∫øt n·ªëi th·ªß c√¥ng
  void _disconnect() {
    setState(() {
      _isConnected = false;
      _connectedDocumentId = null;
      _codeController.clear();
      _numbersController.clear();
    });
    _documentSubscription?.cancel();
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('ƒê√£ ng·∫Øt k·∫øt n·ªëi')),
    );
  }

  // G·ª≠i danh s√°ch s·ªë
  Future<void> _sendNumbers() async {
    if (!_isConnected || _connectedDocumentId == null) {
      _showErrorDialog(
        'Ch∆∞a K·∫øt N·ªëi',
        'Vui l√≤ng k·∫øt n·ªëi ƒë·∫øn m√£ minigame tr∆∞·ªõc khi g·ª≠i.',
      );
      return;
    }

    final numbersInput = _numbersController.text.trim();
    if (numbersInput.isEmpty) {
      _showErrorDialog(
        'Thi·∫øu Danh S√°ch S·ªë',
        'Vui l√≤ng nh·∫≠p danh s√°ch s·ªë ƒë·ªÉ g·ª≠i.',
      );
      return;
    }

    final numbers = numbersInput
        .split(',')
        .map((e) => e.trim())
        .where((e) => e.isNotEmpty)
        .toList();

    if (numbers.isEmpty) {
      _showErrorDialog(
        'Danh S√°ch Kh√¥ng H·ª£p L·ªá',
        'Danh s√°ch s·ªë b·∫°n nh·∫≠p kh√¥ng h·ª£p l·ªá.',
      );
      return;
    }

    try {
      await _firestore
          .collection('lucky_wheel')
          .doc(_connectedDocumentId)
          .update({
        'numbers': numbers,
      });
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('ƒê√£ c·∫≠p nh·∫≠t danh s√°ch s·ªë th√†nh c√¥ng')),
      );
      print('üìÑ C·∫≠p nh·∫≠t numbers: $numbers cho document $_connectedDocumentId');
    } catch (e) {
      _showErrorDialog(
        'L·ªói G·ª≠i D·ªØ Li·ªáu',
        'L·ªói khi g·ª≠i danh s√°ch s·ªë: $e',
      );
      print('‚ùå L·ªói khi g·ª≠i danh s√°ch s·ªë: $e');
    }
  }

  // Hi·ªÉn th·ªã dialog k·∫øt n·ªëi th√†nh c√¥ng
  void _showSuccessDialog() {
    showDialog(
      context: context,
      barrierDismissible: true,
      builder: (context) => Dialog(
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
        elevation: 10,
        child: Container(
          width: MediaQuery.of(context).size.width * 0.8,
          padding: EdgeInsets.all(20),
          decoration: BoxDecoration(
            gradient: LinearGradient(
              colors: [Colors.green.shade300, Colors.blue.shade300],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
            borderRadius: BorderRadius.circular(20),
            boxShadow: [
              BoxShadow(
                color: Colors.black26,
                blurRadius: 10,
                offset: Offset(0, 5),
              ),
            ],
          ),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Icon(
                Icons.check_circle_outline,
                size: 50,
                color: Colors.white,
              ),
              SizedBox(height: 15),
              Text(
                'K·∫øt N·ªëi Th√†nh C√¥ng',
                style: TextStyle(
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                  shadows: [
                    Shadow(
                      color: Colors.black45,
                      offset: Offset(2, 2),
                      blurRadius: 5,
                    ),
                  ],
                ),
                textAlign: TextAlign.center,
              ),
              SizedBox(height: 10),
              Text(
                'ƒê√£ k·∫øt n·ªëi v·ªõi m√£ minigame: $_connectedDocumentId',
                style: TextStyle(
                  fontSize: 16,
                  color: Colors.white.withOpacity(0.9),
                  fontWeight: FontWeight.w500,
                ),
                textAlign: TextAlign.center,
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  Navigator.pop(context);
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.white,
                  padding: EdgeInsets.symmetric(horizontal: 30, vertical: 12),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(15),
                  ),
                  elevation: 5,
                ),
                child: Text(
                  'OK',
                  style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                    color: Colors.green.shade700,
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  @override
  void dispose() {
    _codeController.dispose();
    _numbersController.dispose();
    _documentSubscription?.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        primarySwatch: Colors.blue,
        visualDensity: VisualDensity.adaptivePlatformDensity,
      ),
      home: BasePage(
        showAppBar: true,
        showLeadingAction: true,
        title: 'G·ª≠i D·ªØ Li·ªáu Tr√∫ng Th∆∞·ªüng'.toUpperCase(),
        onBackPressed: () {
          Navigator.pop(context);
        },
        body: Padding(
          padding: const EdgeInsets.symmetric(horizontal: 24.0, vertical: 16.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              // TextField cho m√£ minigame
              Container(
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    colors: [Colors.blue.shade200, Colors.purple.shade200],
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                  ),
                  borderRadius: BorderRadius.circular(12),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black26,
                      blurRadius: 8,
                      offset: Offset(0, 4),
                    ),
                  ],
                ),
                child: TextField(
                  controller: _codeController,
                  decoration: InputDecoration(
                    labelText: 'Nh·∫≠p m√£ minigame',
                    hintText: 'V√≠ d·ª•: 123456',
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                      borderSide: BorderSide.none,
                    ),
                    filled: true,
                    fillColor: Colors.white.withOpacity(0.9),
                    contentPadding: EdgeInsets.symmetric(
                      horizontal: 16,
                      vertical: 14,
                    ),
                  ),
                  style: TextStyle(fontSize: 16),
                  keyboardType: TextInputType.number,
                  enabled: !_isConnected,
                ),
              ),
              SizedBox(height: 16),
              // N√∫t K·∫øt n·ªëi ho·∫∑c Ng·∫Øt k·∫øt n·ªëi
              ElevatedButton(
                onPressed: _isConnected ? _disconnect : _connectToMinigame,
                style: ElevatedButton.styleFrom(
                  backgroundColor:
                      _isConnected ? Colors.red[700] : Colors.blue[700],
                  foregroundColor: Colors.white,
                  padding: EdgeInsets.symmetric(vertical: 16),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                  elevation: 5,
                  shadowColor:
                      _isConnected ? Colors.red[200] : Colors.blue[200],
                ),
                child: Text(
                  _isConnected ? 'Ng·∫Øt K·∫øt N·ªëi' : 'K·∫øt N·ªëi',
                  style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.w600,
                  ),
                ),
              ),
              SizedBox(height: 24),
              // TextField cho danh s√°ch s·ªë
              Container(
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    colors: [Colors.blue.shade200, Colors.purple.shade200],
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                  ),
                  borderRadius: BorderRadius.circular(12),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black26,
                      blurRadius: 8,
                      offset: Offset(0, 4),
                    ),
                  ],
                ),
                child: TextField(
                  controller: _numbersController,
                  decoration: InputDecoration(
                    labelText: 'Nh·∫≠p danh s√°ch s·ªë',
                    hintText: 'V√≠ d·ª•: 12,13,14,15,16',
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                      borderSide: BorderSide.none,
                    ),
                    filled: true,
                    fillColor: Colors.white.withOpacity(0.9),
                    contentPadding: EdgeInsets.symmetric(
                      horizontal: 16,
                      vertical: 14,
                    ),
                  ),
                  style: TextStyle(fontSize: 16),
                ),
              ),
              SizedBox(height: 16),
              // N√∫t G·ª≠i
              ElevatedButton(
                onPressed: _sendNumbers,
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.green[700],
                  foregroundColor: Colors.white,
                  padding: EdgeInsets.symmetric(vertical: 16),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                  elevation: 5,
                  shadowColor: Colors.green[200],
                ),
                child: Text(
                  'G·ª≠i',
                  style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.w600,
                  ),
                ),
              ),
              SizedBox(height: 24),
              // Tr·∫°ng th√°i k·∫øt n·ªëi
              Container(
                padding: EdgeInsets.symmetric(vertical: 12, horizontal: 16),
                decoration: BoxDecoration(
                  color: _isConnected ? Colors.green[50] : Colors.red[50],
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(
                    color: _isConnected ? Colors.green[200]! : Colors.red[200]!,
                  ),
                ),
                child: Text(
                  _isConnected
                      ? '‚úÖ ƒê√£ k·∫øt n·ªëi v·ªõi m√£: $_connectedDocumentId'
                      : 'üîç Ch∆∞a k·∫øt n·ªëi',
                  style: TextStyle(
                    color: _isConnected ? Colors.green[800] : Colors.red[800],
                    fontSize: 14,
                    fontWeight: FontWeight.w500,
                  ),
                  textAlign: TextAlign.center,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
